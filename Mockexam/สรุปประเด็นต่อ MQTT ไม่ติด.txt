hotspot ทรศที่ปล่อยต้อง 2.4 Gz
สรุปประเด็น MQTT ที่พลาด

MQTT ห้ามใช้ Client ID ซ้ำ

เว็บใช้ Server_1761830863336

Arduino ก็ใช้ Server_1761830863336

ผลคือใครต่อทีหลังก็เตะอีกตัวออก

ภาพรวม: "ต่อได้–เด้ง–ต่อได้–เด้ง" แล้วก็งงว่าทำไมเว็บไม่อัปเดต

วิธีแก้คือเปลี่ยน Client ID ให้เป็นของตัวเอง

ใช้แบบนี้แทน

const char MQTT_CLIENT_ID[] = "uno_r4_67070069";


หลักจำตอนสอบ:

“1 broker หลาย client ได้ แต่ 1 client ID มีได้แค่ 1 ตัว”

เว็บใช้พอร์ต 8884 แต่ Arduino ใช้ 1883

เว็บ: phycom.it.kmitl.ac.th:8884 (มักเป็น TLS/secure)

Arduino: phycom.it.kmitl.ac.th:1883 (ไม่เข้ารหัส)

แบบนี้ทำได้ถ้า broker เปิดทั้งสองพอร์ต

หลักจำตอนสอบ:

“1883 = ปกติ, 8883/8884 = secure. ถ้าใช้ 8884 แต่ยังใช้ WiFiClient แบบไม่ SSL มันจะไม่ติด”

Topic ต้องตรงกัน

ทั้งเว็บและ Arduino ใช้ 67070069/temp

ถ้า topic ต่างกันแม้แต่ตัวเดียว (/ หรือพิมพ์ใหญ่เล็ก) ก็จะไม่เห็นกัน

หลักจำ: MQTT มันไม่เดาให้ ต้องตรง

ทำไมหน้าเว็บยังไม่เปลี่ยนค่า

เพราะหนึ่งในนี้:

Arduino ต่อไม่ติดเพราะ Client ID ซ้ำ

Arduino ต่อช้ากว่าเว็บแล้วเว็บโดนเตะ

Arduino ส่งได้ แต่เว็บยังไม่ parse payload

แก้ client ID ก็หายส่วนใหญ่

เรื่อง ADC บน UNO R4

UNO R4 อ่านได้ 12 บิต → 0..4095

ถ้าไปหาร 1023 ทั้งที่ ADC ให้ 4095 ค่าจะเพี้ยน

สูตรที่ควรใช้ตอนอ่านอุณหภูมิ:

int sensorValue = analogRead(A0);              // 0..4095
float voltage = sensorValue * (5.0 / 4095.0);  // ถ้าอ้างอิง 5V
float temperatureC = (voltage - 0.5) / 0.01;   // MCP9700 / TMP36 style


ลดดีเลย์ตอนต่อ Wi-Fi

ของเดิมรอ 10 วิทุกลูป มันเลยดู “ช้า”

เปลี่ยนเป็นลองทุก 2 วิ จะเห็นอาการเร็วกว่ามาก

สรุปสั้นที่สุดแบบเข้าห้องสอบได้เลย

MQTT ต้องไม่ใช้ Client ID ซ้ำ ไม่งั้นมันเตะกันเอง

เว็บใช้ พอร์ต 8884 (secure) แต่ Arduino ใช้ 1883 (ไม่ secure) ได้ ถ้า broker เปิดทั้งคู่

Topic ต้องตรง ไม่งั้นมองไม่เห็น

UNO R4 ใช้ ADC 12 บิต → 4095

ถ้าจะให้หน้าเว็บเห็นค่าจาก Arduino จริงๆ ให้ตั้ง Client ID ของ Arduino เป็นชื่อใหม่ เช่น

const char MQTT_CLIENT_ID[] = "uno_r4_67070069";


จำ 3 อันนี้พอ:

Client ID ห้ามซ้ำ

พอร์ตต้องตรงกับชนิดการเชื่อมต่อ (1883 vs 8884)

ADC ของ R4 = 4095